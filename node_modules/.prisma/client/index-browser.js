
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.BallPossessionScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  team_id: 'team_id',
  possession_time: 'possession_time'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  player_id: 'player_id',
  card_type: 'card_type',
  card_time: 'card_time'
};

exports.Prisma.FoulScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  team_id: 'team_id',
  player_id: 'player_id',
  type: 'type'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  player_id: 'player_id',
  goal_time: 'goal_time'
};

exports.Prisma.InjuryScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  player_id: 'player_id',
  injury_type: 'injury_type'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  homeTeam: 'homeTeam',
  awayTeam: 'awayTeam'
};

exports.Prisma.OffsetScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  offset_team_id: 'offset_team_id',
  offset_time: 'offset_time'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  numberJersey: 'numberJersey',
  position: 'position',
  status: 'status',
  team_id: 'team_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.SwitchPlayerScalarFieldEnum = {
  id: 'id',
  match_id: 'match_id',
  player_out_id: 'player_out_id',
  player_in_id: 'player_in_id',
  switch_time: 'switch_time'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});
exports.Status = {
  main: 'main',
  cadangan: 'cadangan'
};

exports.Prisma.ModelName = {
  player: 'player',
  team: 'team',
  match: 'match',
  offset: 'offset',
  goal: 'goal',
  foul: 'foul',
  injury: 'injury',
  ballPossession: 'ballPossession',
  card: 'card',
  switchPlayer: 'switchPlayer'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
